        - 
        - ⊗(A,B) = kron(A, B)
        - 
        - function transforms_e(Lw, r̂, l)
        -     
        - 
        0     A = (Lw - Lw*r̂ - Lw)/(2*tanh((r̂-1)/l) + tanh(-2/l)*(r̂ - 1))
        0     b = (A*tanh(-2/l) + Lw)/2
        0     c = Lw - b
 34618032     xt = (r,s) -> (A .* tanh.((r .- 1) ./ l) .+ b .* r .+ c,
        -                    ((A .* sech.((r .- 1) ./ l).^2) ./ l) .+ b,
        -                    zeros(size(s)))
 34618032     yt = (r,s) -> (A .* tanh.((s .- 1) ./ l) .+ b.*s .+ c,
        -                    zeros(size(r)),
        -                    ((A .* sech.((s .- 1) ./ l).^2) ./ l) .+ b)
        - 
        -         
        0     return xt, yt
        -     
        - end
        - 
        - function transforms_ne(Lw, el_x, el_y)
        -     
        -     xt = (r,s) -> (el_x .* tan.(atan((Lw)/el_x).* (0.5*r .+ 0.5)),
        -                    el_x .* sec.(atan((Lw)/el_x).* (0.5*r .+ 0.5)).^2 * atan((Lw)/el_x) * 0.5 ,
        -                    zeros(size(s)))
        -     
        -     yt = (r,s) -> (el_y .* tan.(atan((Lw)/el_y).* (0.5*s .+ 0.5)) ,
        -                    zeros(size(r)),
        -                    el_y .* sec.(atan((Lw)/el_y).*(0.5*s .+ 0.5)) .^2 * atan((Lw)/el_y) * 0.5 )
        - 
        -     return xt, yt
        - end
        - 
        - function transforms_n(Lw)
        -     
        -     xt = (r,s) -> (Lw/2 .* (r .+ 1),
        -                    fill(Lw/2, size(r)),
        -                    zeros(size(s)))
        -     
        -     yt = (r,s) -> (Lw/2 .* (s .+ 1),
        -                    zeros(size(r)),
        -                    fill(Lw/2, size(s)))
        -     return xt, yt
        - end
        - 
        - function create_metrics(Nr, Ns, B_p, μ, ρ,
        -                         xf=(r,s)->(r, ones(size(r)), zeros(size(r))),
        -                         yf=(r,s)->(s, zeros(size(s)), ones(size(s))))
        - 
        - 
        0     Nrp = Nr + 1
        0     Nsp = Ns + 1
        -     Np = Nrp * Nsp
        - 
        0     r = range(-1, stop=1, length=Nrp)
        0     s = range(-1, stop=1, length=Nsp)
        -         
        -     # Create the mesh
     9792     r = ones(1, Nsp) ⊗ r
     9888     s = s' ⊗ ones(Nrp)
        - 
        0     (x, xr, xs) = xf(r, s)
        0     (y, yr, ys) = yf(r, s)
        - 
 23078688     J = xr .* ys - xs .* yr
        -     
        0     @assert minimum(J) > 0
        -     
 11539344     JI = 1 ./ J
        -     
 11539344     rx =  ys ./ J
 11539344     sx = -yr ./ J
 11539344     ry = -xs ./ J
 11539344     sy =  xr ./ J
        - 
       96     μx = μy = μ(x, y, B_p)
        -         
        - 
        -     # variable coefficient matrix components
 34618032     crr = J .* (rx .* μx .* rx + ry .* μy .* ry)
 34618032     crs = J .* (sx .* μx .* rx + sy .* μy .* ry)
 34618032     css = J .* (sx .* μx .* sx + sy .* μy .* sy)
        -     
        -     # surface matrices
        0     (xf1, yf1) = (view(x, 1, :), view(y, 1, :))
        0     nx1 = -ys[1, :]
        0     ny1 =  xs[1, :]
     9792     sJ1 = hypot.(nx1, ny1)
     9792     nx1 = nx1 ./ sJ1
     9792     ny1 = ny1 ./ sJ1
       96     μf1 = μ(xf1, yf1, B_p)
    19680     η = μf1 ./ (2 * sqrt.(μf1 ./ ρ(xf1, yf1, B_p)))
        - 
        - 
        0     (xf2, yf2) = (view(x, Nrp, :), view(y, Nrp, :))
        0     nx2 =  ys[end, :]
        0     ny2 = -xs[end, :]
     9792     sJ2 = hypot.(nx2, ny2)
     9792     nx2 = nx2 ./ sJ2
     9792     ny2 = ny2 ./ sJ2
       96     μf2 = μ(xf2, yf2, B_p)
        - 
        0     (xf3, yf3) = (view(x, :, 1), view(y, :, 1))
        0     nx3 =  yr[:, 1]
        0     ny3 = -xr[:, 1]
     9792     sJ3 = hypot.(nx3, ny3)
     9792     nx3 = nx3 ./ sJ3
     9792     ny3 = ny3 ./ sJ3
        - 
        0     (xf4, yf4) = (view(x, :, Nsp), view(y, :, Nsp))
        0     nx4 = -yr[:, end]
        0     ny4 =  xr[:, end]
     9792     sJ4 = hypot.(nx4, ny4)
     9792     nx4 = nx4 ./ sJ4
     9792     ny4 = ny4 ./ sJ4
        - 
      336     (coord = (x,y),
        -      facecoord = ((xf1, xf2, xf3, xf4), (yf1, yf2, yf3, yf4)),
        -      μf2 = μf2,
        -      η = η,
        -      crr = crr, css = css, crs = crs,
        -      J=J,
        -      JI = JI,
        -      sJ = (sJ1, sJ2, sJ3, sJ4),
        -      nx = (nx1, nx2, nx3, nx4),
        -      ny = (ny1, ny2, ny3, ny4),
        -      rx = rx, ry = ry, sx = sx, sy = sy)
        - end
        - 
        - 
        - function transfinite_blend(α1, α2, α3, α4, α1s, α2s, α3r, α4r, r, s)
        -   # +---4---+
        -   # |       |
        -   # 1       2
        -   # |       |
        -   # +---3---+
        -   @assert [α1(-1) α2(-1) α1( 1) α2( 1)] ≈ [α3(-1) α3( 1) α4(-1) α4( 1)]
        - 
        - 
        -   x = (1 .+ r) .* α2(s)/2 + (1 .- r) .* α1(s)/2 +
        -       (1 .+ s) .* α4(r)/2 + (1 .- s) .* α3(r)/2 -
        -      ((1 .+ r) .* (1 .+ s) .* α2( 1) +
        -       (1 .- r) .* (1 .+ s) .* α1( 1) +
        -       (1 .+ r) .* (1 .- s) .* α2(-1) +
        -       (1 .- r) .* (1 .- s) .* α1(-1)) / 4
        - 
        -   xr =  α2(s)/2 - α1(s)/2 +
        -         (1 .+ s) .* α4r(r)/2 + (1 .- s) .* α3r(r)/2 -
        -       (+(1 .+ s) .* α2( 1) +
        -        -(1 .+ s) .* α1( 1) +
        -        +(1 .- s) .* α2(-1) +
        -        -(1 .- s) .* α1(-1)) / 4
        - 
        - 
        -   xs = (1 .+ r) .* α2s(s)/2 + (1 .- r) .* α1s(s)/2 +
        -        α4(r)/2 - α3(r)/2 -
        -       (+(1 .+ r) .* α2( 1) +
        -        +(1 .- r) .* α1( 1) +
        -        -(1 .+ r) .* α2(-1) +
        -        -(1 .- r) .* α1(-1)) / 4
        - 
        -   return (x, xr, xs)
        - end
        - 
        - 
        - function transfinite(x1, x2, x3, x4,
        -                      y1, y2, y3, y4)
        - 
        -     
        -         ex = [(α) -> x1 * (1 .- α) / 2 + x3 * (1 .+ α) / 2,
        -           (α) -> x2 * (1 .- α) / 2 + x4 * (1 .+ α) / 2,
        -           (α) -> x1 * (1 .- α) / 2 + x2 * (1 .+ α) / 2,
        -           (α) -> x3 * (1 .- α) / 2 + x4 * (1 .+ α) / 2]
        -     exα = [(α) -> -x1 / 2 + x3 / 2,
        -            (α) -> -x2 / 2 + x4 / 2,
        -            (α) -> -x1 / 2 + x2 / 2,
        -            (α) -> -x3 / 2 + x4 / 2]
        -     ey = [(α) -> y1 * (1 .- α) / 2 + y3 * (1 .+ α) / 2,
        -           (α) -> y2 * (1 .- α) / 2 + y4 * (1 .+ α) / 2,
        -           (α) -> y1 * (1 .- α) / 2 + y2 * (1 .+ α) / 2,
        -           (α) -> y3 * (1 .- α) / 2 + y4 * (1 .+ α) / 2]
        -     eyα = [(α) -> -y1 / 2 + y3 / 2,
        -            (α) -> -y2 / 2 + y4 / 2,
        -            (α) -> -y1 / 2 + y2 / 2,
        -            (α) -> -y3 / 2 + y4 / 2]
        - 
        - 
        -     xt(x,y) = transfinite_blend(ex[1], ex[2], ex[3], ex[4],
        -                                 exα[1], exα[2], exα[3], exα[4],
        -                                 x, y)
        -     yt(x,y) = transfinite_blend(ey[1], ey[2], ey[3], ey[4],
        -                                 eyα[1], eyα[2], eyα[3], eyα[4],
        -                                 x, y)
        - 
        - 
        -     return xt, yt
        - 
        - end
