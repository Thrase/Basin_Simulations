        - #using Plots
        - using CUDA
        - using CUDA.CUSPARSE
        - using Printf
        - using BenchmarkTools
        - 
        - CUDA.allowscalar(false)
        - 
        - 
        - function Q_DYNAMIC!(dψV, ψδ, p, t)
        - 
        0     nn = p.nn
        0     Δτ = p.vars.Δτ
        0     τ = p.vars.τ
        0     M = p.ops.M̃
        0     u = p.vars.u
        0     ge = p.vars.ge
        0     RS = p.RS
        0     η = p.metrics.η
        0     μf2 = p.metrics.μf2
        -     fc = p.metrics.facecoord[2][1]
        0     Lw = p.Lw
        0     vf = p.vf
        - 
        0     reject_step = p.reject_step
        0     if reject_step[1]
        0         return
        -     end
        -     
        0     ψ  = @view ψδ[1:nn]
        0     δ =  @view ψδ[nn .+ (1:nn)]
        0     dψ = @view dψV[1:nn]
        0     V = @view dψV[nn .+ (1:nn)]
        -     
        -     
        -     #bc_Dirichlet = (lf, x, y) -> (2-lf)*(δ ./ 2) + (lf-1) .* ((RS.τ_inf*Lw) ./ μf2 .+ t * RS.Vp/2)
        -     #bc_Neumann   = (lf, x, y) -> zeros(size(x))
        -     
        0     locbcarray_mod!(ge, vf, δ, p, RS, t, μf2, Lw)
        -     
        0     u[:] = M \ ge
        -     
        0     Δτ .= - computetraction_mod(p, 1, u, δ)
        - 
        -     # solve for velocity point by point and set state derivative
        0     for n = 1:nn
        - 
        0         ψn = ψ[n]
        0         bn = RS.b[n]
        0         τn = Δτ[n]
        0         τ[n] = τn
        0         ηn = η[n]
        - 
        0         if isnan(τn) || !isfinite(τn)
        -             #println("τ reject")
        0             reject_step[1] = true
        0             return
        -         end
        - 
        0         VR = abs(τn / ηn)
        0         VL = -VR
        0         Vn = V[n]
        0         obj_rs(V) = rateandstateQ(V, ψn, RS.σn, τn, ηn, RS.a, RS.V0)
        0         (Vn, _, iter) = newtbndv(obj_rs, VL, VR, Vn; ftol = 1e-12,
        -                                  atolx = 1e-12, rtolx = 1e-12)
        -         
        0         if isnan(Vn) || iter < 0 || !isfinite(Vn)
        -             #println("V reject")
        0             reject_step[1] = true
        0             return
        -         end
        - 
        0         V[n] = Vn
        -         
        0         if bn != 0
        0             dψ[n] = (bn * RS.V0 / RS.Dc) * (exp((RS.f0 - ψn) / bn) - abs(Vn) / RS.V0)
        -         else
        0             dψ[n] = 0
        -         end
        -         
        0         if !isfinite(dψ[n]) || isnan(dψ[n])
        -             #println("ψ reject")
        0             dψ[n] = 0
        0             reject_step[1] = true
        0             return
        -         end
        -     end
        -     
        0     nothing
        - end
        - 
        - 
        - # timestepping rejection function
        - function stepcheck(_, p, _)
        -     if p.reject_step[1]
        -         p.reject_step[1] = false
        -         return true
        -     end
        -     return false
        - end
        - 
        - # function for every accepted timstep with integrator stopping condition
        - function STOPFUN_Q(ψδ,t,i)
        -     
        0     if isdefined(i,:fsallast)
        - 
        0         nn = i.p.nn
        -         RS = i.p.RS
        0         τ = i.p.vars.τ
        0         t_prev = i.p.vars.t_prev
        -         year_seconds = i.p.vars.year_seconds
        0         u_prev = i.p.vars.u_prev
        0         u = i.p.vars.u
        0         fault_coord = i.p.metrics.facecoord[2][1]
        0         Lw = i.p.Lw
        0         io = i.p.io
        0         pf = i.p.io.pf
        0         η = i.p.metrics.η
        0         cycles = i.p.cycles[1]
        -         
        0         dψV = i.fsallast
 92221056         ψ = ψδ[(1:nn)]
 92221056         δ = ψδ[nn .+ (1:nn)]
        0         V = @view dψV[nn .+ (1:nn)]
 92221056         Vmax = maximum(abs.(V))
        -         
        -         
        0         write_out(δ, V, τ, ψ, t,
        -                   fault_coord,
        -                   Lw,
        -                   io.station_names,
        -                   η)
        -         
        -         
        -         #if pf[1] % 30 == 0
        - 
        -             
        -         #plt1 = plot(V[1:nn], fault_coord[1:nn], yflip = true, ylabel="Depth",
        -         #      xlabel="Slip-Rate", linecolor=:blue, linewidth=.1,
        -         #      legend=false)
        -             
        -         #plt2 = plot(δ[1:nn], fault_coord[1:nn], yflip = true, ylabel="Depth",
        -         #            xlabel="Slip", linecolor=:blue, linewidth=.1,
        -         #            legend=false)
        -         #plot(plt1, plt2, layout=2)
        -         #gui()
        -             
        0         write_out_ss(δ, V, τ, ψ, t,
        -                      io.slip_file,
        -                      io.stress_file,
        -                      io.slip_rate_file,
        -                      io.state_file)
        -         
        -         #end
        -         
        -         #=
        -         if cycles == 2
        -             plot(V[1:nn], fault_coord[1:nn], yflip = true, ylabel="Depth",
        -                  xlabel="Slip", linecolor=:blue, linewidth=.1,
        -                  legend=false)
        -             gui()
        -             sleep(10000)
        -         end
        -         =#
        - 
        -         year_count = t/year_seconds
        - 
        -         #@show Vmax, cycles
        0         if Vmax >= 1e-2 #&& year_count > (t_prev[2] + 20)
        0             return true
        -         end
        -         
        0         pf[1] += 1
        0         u_prev .= u
        0         t_prev[1] = t
        -         
        -     end
        -     
        0     return false
        -         
        - end
        - 
        - 
        - function MMS_WAVEPROP_CPU!(dq, q, p, t)
        - 
        -     nn = p.nn
        -     fc = p.fc
        -     coord = p.coord
        -     R = p.R
        -     B_p = p.B_p
        -     MMS = p.MMS
        -     Λ = p.d_ops.Λ
        -     sJ = p.sJ
        -     Z̃f = p.d_ops.Z̃f
        -     L = p.d_ops.L
        -     H = p.d_ops.H
        -     P̃I = p.d_ops.P̃I
        -     JIHP = p.d_ops.JIHP
        -     CHAR_SOURCE = p.CHAR_SOURCE
        -     FORCE = p.FORCE
        - 
        -     u = q[1:nn^2]
        - 
        -     # compute all temporal derivatives
        -     dq .= Λ * q
        - 
        -     for i in 1:4
        -         fx = fc[1][i]
        -         fy = fc[2][i]
        -         S̃_c = sJ[i] .* CHAR_SOURCE(fx, fy, t, i, R[i], B_p, MMS)
        -         dq[2nn^2 + (i-1)*nn + 1 : 2nn^2 + i*nn] .+= S̃_c ./ (2*Z̃f[i])
        -         dq[nn^2 + 1:2nn^2] .+= L[i]' * H[i] * S̃_c ./ 2
        -     end
        -     dq[nn^2 + 1 : 2nn^2] .= JIHP * dq[nn^2 + 1 : 2nn^2]
        -     dq[nn^2 + 1:2nn^2] .+= P̃I * FORCE(coord[1][:], coord[2][:], t, B_p, MMS)
        - end
        - 
        - 
        - function WAVEPROP!(dq, q, p, t)
        -     nn = p.nn
        -     Λ = p.d_ops.Λ
        -     JIHP = p.JIHP
        -     dq .= Λ * q
        -     dq[nn^2 + 1 : 2nn^2] .= JIHP * dq[nn^2 + 1 : 2nn^2]
        - end
        - 
        - 
        - function MMS_FAULT_CPU!(dq, q, p, t)
        - 
        -     nn = p.nn
        -     R = p.R
        -     fc = p.fc
        -     coord = p.coord
        -     B_p = p.B_p
        -     RS = p.RS
        -     b = p.b
        -     MMS = p.MMS
        -     Λ = p.d_ops.Λ
        -     sJ = p.sJ
        -     Z̃f = p.d_ops.Z̃f
        -     L = p.d_ops.L
        -     H = p.d_ops.H
        -     P̃I = p.d_ops.P̃I
        -     JIHP = p.d_ops.JIHP
        -     nCnΓ1 = p.d_ops.nCnΓ1
        -     nBBCΓL1 = p.d_ops.nBBCΓL1
        -     CHAR_SOURCE = p.CHAR_SOURCE
        -     STATE_SOURCE = p.STATE_SOURCE
        -     FORCE = p.FORCE
        -     τ̃f = p.τ̃f
        -     
        -     u = @view q[1:nn^2]
        -     v = @view q[nn^2 + 1: 2nn^2]
        -     û1 = @view q[2nn^2 + 1 : 2nn^2 + nn]
        -     ψ = @view q[2nn^2 + 4nn + 1 : 2nn^2 + 5nn]
        -     dv = @view dq[nn^2 + 1: 2nn^2]
        -     dû1 = @view dq[2nn^2 + 1 : 2nn^2 + nn]
        -     dψ = @view dq[2nn^2 + 4nn + 1 : 2nn^2 + 5nn]
        - 
        -     # compute all temporal derivatives
        -     dq .= Λ * q
        -     # get velocity on fault
        -     #vf .= q[nn^2 + 1: nn : 2nn^2]
        -     # compute numerical traction on face 1
        -     τ̃f .= nBBCΓL1 * u + nCnΓ1 * û1
        - 
        -     # Root find for RS friction
        -     for n in 1:nn
        -         
        -         vn = v[1 + nn * (n-1)]
        - 
        -         v̂_root(v̂) = rateandstateD(v̂,
        -                                   Z̃f[1][n],
        -                                   vn,
        -                                   sJ[1][n],
        -                                   ψ[n],
        -                                   RS.a,
        -                                   τ̃f[n],
        -                                   RS.σn,
        -                                   RS.V0)
        - 
        -         left = vn - τ̃f[n]/Z̃f[1][n]
        -         right = -left
        -         
        -         if left > right  
        -             tmp = left
        -             left = right
        -             right = tmp
        -         end
        -         
        -         (v̂n, _, _) = newtbndv(v̂_root, left, right, vn; ftol = 1e-12,
        -                               atolx = 1e-12, rtolx = 1e-12)
        - 
        -         if isnan(v̂n)
        -             println("Not bracketing root")
        -         end
        -         
        -         dû1[n] = v̂n
        -         dv[1 + (n - 1)*nn] +=  H[1][n, n] * (Z̃f[1][n] * v̂n)
        -         dψ[n] = (b[n] .* RS.V0 ./ RS.Dc) .* (exp.((RS.f0 .- ψ[n]) ./ b[n]) .- abs.(2 .* v̂n) ./ RS.V0)
        -     end
        -                  
        - 
        -     # Non-fault Source injection
        -     for i in 2:4
        -         SOURCE = sJ[i] .* CHAR_SOURCE(fc[1][i], fc[2][i], t, i, R[i], B_p, MMS)
        -         dq[2nn^2 + (i-1)*nn + 1 : 2nn^2 + i*nn] .+= SOURCE ./ (2*Z̃f[i])
        -         dq[nn^2 + 1:2nn^2] .+= L[i]' * H[i] * SOURCE ./ 2
        -     end
        -     
        -     dq[nn^2 + 1:2nn^2] .= JIHP * dq[nn^2 + 1:2nn^2]
        -     dq[nn^2 + 1:2nn^2] .+= P̃I * FORCE(coord[1][:], coord[2][:], t, B_p, MMS)
        - 
        -     # psi source
        -     dψ[:] .+= STATE_SOURCE(fc[1][1], fc[2][1], b, t, B_p, RS, MMS)
        - 
        - end
        - 
        - 
        - function FAULT_CPU!(dq, q, p, t)
        - 
        -     nn = p.nn
        -     RS = p.RS
        -     b = p.b
        -     Λ = p.d_ops.Λ
        -     sJ = p.sJ[1]
        -     Z̃f = p.d_ops.Z̃f[1]
        -     H = p.d_ops.H[1]
        -     JIHP = p.d_ops.JIHP
        -     nCnΓ1 = p.d_ops.nCnΓ1
        -     nBBCΓL1 = p.d_ops.nBBCΓL1
        -     τ̃f = p.τ̃f
        -     
        -     u = @view q[1:nn^2]
        -     v = @view q[nn^2 + 1 : 2nn^2]
        -     û1 = @view q[2nn^2 + 1 : 2nn^2 + nn]
        -     ψ = @view q[2nn^2 + 4nn + 1 : 2nn^2 + 5nn]
        -     dv = @view dq[nn^2 + 1 : 2nn^2]
        -     dû1 = @view dq[2nn^2 + 1 : 2nn^2 + nn]
        -     dψ = @view dq[2nn^2 + 4nn + 1 : 2nn^2 + 5nn]
        - 
        -     dq .= Λ * q
        -     # compute numerical traction on face 1
        -     τ̃f .= nBBCΓL1 * u + nCnΓ1 * û1
        - 
        -     # Root find for RS friction
        -     for n in 1:nn
        - 
        -         vn = v[1 + nn * (n-1)]
        - 
        -         v̂_root(v̂) = rateandstateD(v̂,
        -                                   Z̃f[n],
        -                                   vn,
        -                                   sJ[n],
        -                                   ψ[n],
        -                                   RS.a,
        -                                   τ̃f[n],
        -                                   RS.σn,
        -                                   RS.V0)
        - 
        -         left = vn - τ̃f[n]/Z̃f[n]
        -         right = -left
        - 
        -         if left > right  
        -             tmp = left
        -             left = right
        -             right = tmp
        -         end
        -         
        -         (v̂n, _, _) = newtbndv(v̂_root, left, right, vn; ftol = 1e-12,
        -                               atolx = 1e-12, rtolx = 1e-12)
        - 
        -         if isnan(v̂n)
        -             #println("Not bracketing root")
        -         end
        -         dû1[n] = v̂n
        -         dv[1 + (n - 1)*nn] +=  H[n, n] * (Z̃f[n] * v̂n)
        -         dψ[n] = (b[n] .* RS.V0 ./ RS.Dc) .* (exp.((RS.f0 .- ψ[n]) ./ b[n]) .- abs.(2 .* v̂n) ./ RS.V0)
        -     end
        -          
        -     dv .= JIHP * dq[nn^2 + 1:2nn^2]
        - 
        - end
        - 
        - 
        - function FAULT_GPU!(dq, q, p, t)
        - 
        0     nn = p.nn
        0     RS = p.RS
        0     b = p.b
        0     Λ = p.Λ
        0     sJ = p.sJ
        0     Z̃f = p.Z̃f
        0     H = p.H
        0     JIHP = p.JIHP
        0     nCnΓ1 = p.nCnΓ1
        0     nBBCΓL1 = p.nBBCΓL1
        0     τ̃f = p.τ̃f
        -     
        0     threads = p.threads
        0     blocks = p.blocks
        - 
 13712160     u = @view q[1:nn^2]
        0     vf = @view q[nn^2 + 1: nn : 2nn^2]
 13712160     û1 = @view q[2nn^2 + 1 : 2nn^2 + nn]
 13712160     ψ = @view q[2nn^2 + 4nn + 1 : 2nn^2 + 5nn]
 13712160     dv = @view dq[nn^2 + 1 : 2nn^2]
 13712160     dû1 = @view dq[2nn^2 + 1 : 2nn^2 + nn]
 13712160     dψ = @view dq[2nn^2 + 4nn + 1 : 2nn^2 + 5nn]
        0     dvf = @view dq[nn^2 + 1: nn : 2nn^2]
        - 
        -    
 22853600     dq .= Λ * q
        - 
        -     # compute numerical traction on face 1
        -     
 22853600     τ̃f .= nBBCΓL1 * u + nCnΓ1 * û1
        -     
        -     
114268000     @cuda blocks=blocks threads=threads FAULT_PROBLEM!(dû1, dvf, vf, τ̃f, Z̃f, H, sJ, ψ, dψ, b, RS)
        - 
        -     
 22853600     dv .= JIHP * dq[nn^2 + 1:2nn^2]
        - 
        - end
        - 
        - 
        - function FAULT_PROBLEM!(dû1, dvf, vf, τ̃f, Z̃f, H, sJ, ψ, dψ, b, RS)
        - 
        -     a = RS[1]
        -     σn = RS[2]
        -     V0 = RS[3]
        -     Dc = RS[4]
        -     f0 = RS[5]
        -     nn = RS[6]
        - 
        -     n = blockDim().x * (blockIdx().x - 1) + threadIdx().x  
        -     #@cuprintln("hello")
        -     if n <= nn
        -         
        -         vn = vf[n]
        -         Z̃n = Z̃f[n]
        -         sJn = sJ[n]
        -         ψn = ψ[n]
        -         τ̃n = τ̃f[n]
        -         bn = b[n]
        -         Hn = H[n]
        -         v̂nL = vn - τ̃n/Z̃n
        -         v̂nR = -v̂nL
        - 
        -         (fL, _) = rateandstateD_GPU(v̂nL, Z̃n, vn, sJn, ψn, a, τ̃n, σn, V0)
        -         (fR, _) = rateandstateD_GPU(v̂nR, Z̃n, vn, sJn, ψn, a, τ̃n, σn, V0)
        -         (f, df) = rateandstateD_GPU(vn, Z̃n, vn, sJn, ψn, a, τ̃n, σn, V0)
        - 
        -         dv̂nlr = v̂nR - v̂nL
        - 
        -         v̂n = vn
        -         
        -         count = 0
        -         for iter in 1:500
        - 
        -             dv̂n = -f / df
        -             v̂n  = v̂n + dv̂n
        - 
        -             if v̂n < v̂nL || v̂n > v̂nR || abs(dv̂n) / dv̂nlr < 0
        -                 v̂n = (v̂nR + v̂nL) / 2
        -                 dv̂n = (v̂nR - v̂nL) / 2
        -             end
        -             
        -             (f, df) = rateandstateD_GPU(v̂n, Z̃n, vn, sJn, ψn, a, τ̃n, σn, V0)
        - 
        -             if f * fL > 0
        -                 (fL, v̂nL) = (f, v̂n)
        -             else
        -                 (fR, v̂nR) = (f, v̂n)
        -             end
        -             dv̂nlr = v̂nR - v̂nL
        - 
        -             if abs(f) < 1e-12 && abs(dv̂n) < 1e-12 + 1e-12 * (abs(dv̂n) + abs(v̂n))
        -                 break
        -             end
        -             count += 1
        -         end
        -         
        -         dû1[n] = v̂n
        - 
        -         dvf[n] += Hn * (Z̃n * v̂n)
        - 
        -         dψ[n] = (bn .* V0 ./ Dc) .* (exp.((f0 .- ψn) ./ bn) .- abs.(2 .* v̂n) ./ V0)
        -     end
        -     
        -     nothing
        - 
        - end
        - 
        - 
        - # bracketed newton method
        - function newtbndv(func, xL, xR, x; ftol = 1e-6, maxiter = 500, minchange=0,
        -                   atolx = 1e-4, rtolx = 1e-4)
        - 
        0     (fL, _) = func(xL)
        0     (fR, _) = func(xR)
        0     if fL .* fR > 0
        0         return (typeof(x)(NaN), typeof(x)(NaN), -maxiter)
        -     end
        - 
        0     (f, df) = func(x)
        0     dxlr = xR - xL
        - 
        0     for iter = 1:maxiter
        0         dx = -f / df
        0         x  = x + dx
        - 
        0         if x < xL || x > xR || abs(dx) / dxlr < minchange
        0             x = (xR + xL) / 2
        0             dx = (xR - xL) / 2
        -         end
        - 
        0         (f, df) = func(x)
        - 
        0         if f * fL > 0
        -             (fL, xL) = (f, x)
        -         else
        -             (fR, xR) = (f, x)
        -         end
        0         dxlr = xR - xL
        - 
        0         if abs(f) < ftol && abs(dx) < atolx + rtolx * (abs(dx) + abs(x))
        0             return (x, f, iter)
        -         end
        -     end
        0     return (x, f, -maxiter)
        - end
        - 
        - 
        - # Dynamic roofinding problem on the fault
        - function rateandstateD(v̂, z̃, v, sJ, ψ, a, τ̃, σn, V0)
        -     Y = (1 / (2 * V0)) * exp(ψ / a)
        -     f = a * asinh(2v̂ * Y)
        -     dfdv̂  = a * (1 / sqrt(1 + (2v̂ * Y)^2)) * 2Y
        -     g = sJ * σn * f + τ̃ + z̃*(v̂ - v)
        -     dgdv̂ = z̃ + sJ * σn * dfdv̂
        -     
        -     return (g, dgdv̂)
        - end
        - 
        - 
        - # Dynamic roofinding problem on the fault
        - function rateandstateD_GPU(v̂, z̃, v, sJ, ψ, a, τ̃, σn, V0)
        -     Y = (1 / (2 * V0)) * exp(ψ / a)
        -     f = a * CUDA.asinh(2v̂ * Y)
        -     dfdv̂  = a * (1 / sqrt(1 + (2v̂ * Y)^2)) * 2Y
        -     g = sJ * σn * f + τ̃ + z̃*(v̂ - v)
        -     dgdv̂ = z̃ + sJ * σn * dfdv̂
        -     
        -     return (g, dgdv̂)
        - end
        - 
        - 
        - function timestep_write!(q, f!, p, dt, (t0, t1), Δq = similar(q), Δq2 = similar(q))
     1216     T = eltype(q)
        -     
        0     nn = p.nn
        0     Lw = p.Lw
        0     fc = p.fc
        0     pf = p.io.pf
        0     τ̃f = p.τ̃f
        0     sJ = p.sJ
        0     Z̃f = p. Z̃f
        0     io = p.io
        0     v̂ = p.v̂
        0     d_to_s = p.d_to_s
        0     force = p.force
        0     vf = @view q[nn^2 + 1: nn : 2nn^2]
      240     uf = @view q[1 : nn : nn^2]
        -     ψ = @view q[2nn^2 + 4nn + 1 : 2nn^2 + 5*nn]
      640     
        -     RKA = [
        -         T(0),
        -         T(-567301805773 // 1357537059087),
        -         T(-2404267990393 // 2016746695238),
        -         T(-3550918686646 // 2091501179385),
        -         T(-1275806237668 // 842570457699),
        -     ]
      640 
        -     RKB = [
        -         T(1432997174477 // 9575080441755),
        -         T(5161836677717 // 13612068292357),
        -         T(1720146321549 // 2090206949498),
        -         T(3134564353537 // 4481467310338),
        -         T(2277821191437 // 14882151754819),
        -     ]
      640 
        -     RKC = [
        -         T(0),
        -         T(1432997174477 // 9575080441755),
        -         T(2526269341429 // 6820363962896),
        -         T(2006345519317 // 3224310063776),
        -         T(2802321613138 // 2924317926251),
        -     ]
        -     
        0 
        0     nstep = ceil(Int, (t1 - t0) / dt)
        -     dt = (t1 - t0) / nstep
        0 
        0     pf[1] = .1
        -     pf[2] = .5
        -     
        0 
        0     fill!(Δq, 0)
        0     fill!(Δq2, 0)
        0     for step in 1:nstep
        0         t = t0 + (step - 1) * dt
        0         for s in 1:length(RKA)
 22853600             f!(Δq2, q, p, t + RKC[s] * dt)
 22853600             v̂ .= Δq2[2nn^2 + 1 : 2nn^2 + nn]
 31995184             Δq .+= Δq2
 22853600             q .+= (RKB[s] * dt) .* Δq
        -             Δq .*= RKA[s % length(RKA) + 1]
        -         end
559456128         
        -         v̂_cpu = Array(v̂)
        - 
        -         #if step == ceil(Int, pf[1]/dt)
        0             
        0         if any(isnan, v̂_cpu)
        0             @printf "nan from dynamic rootfinder"
        -             exit()
        -         end
1692965200 
        -         write_out(Array(2uf),
        -                   2v̂_cpu,
        -                   Array(-τ̃f ./ sJ .- Z̃f .* (v̂ .- vf) ./ sJ),
        -                   Array(ψ),
        -                   t,
        -                   fc,
        -                   Lw,
        -                   io.station_names)
        -         #pf[1] +=.1
        -         #end
        -         
        -         #if step == ceil(Int, pf[2]/dt)
559446336 
        -         δ = Array(2uf)
        -         
        -         #=
        -         plt1 = plot(2v̂_cpu, fc, yflip = true, ylabel="Depth",
        -                     xlabel="Slip-Rate", linecolor=:red, linewidth=.1,
        -                     legend=false)
        -         plt2 = plot(δ, fc, yflip = true, ylabel="Depth",
        -                     xlabel="Slip", linecolor=:red, linewidth=.1,
        -                     legend=false)
        -         plot(plt1, plt2, layout=2)
        -         #sleep(.)
        -         gui()
1133518720         =#
        -         write_out_ss(δ,
        -                      2v̂_cpu,
        -                      Array(-τ̃f ./ sJ .- Z̃f .* (v̂ .- vf) ./ sJ),
        -                      Array(ψ),
        -                      t,
        -                      io.slip_file,
        -                      io.stress_file,
        -                      io.slip_rate_file,
        -                      io.state_file)
        -         #pf[2] += .5
        -         #end
        - 
        -         
        0         #@show 2*maximum(v̂_cpu)
        -         if (2 * maximum(v̂_cpu)) < d_to_s && force == 0 #&& pf[2] > 10.0
        -             #plot(2*v̂_cpu, fc, yflip = true, ylabel="Depth",
        -              #    xlabel="Slip", linecolor=:red, linewidth=.1,
        -              #    legend=false)
        -             #gui()
        0             #sleep(1000000)
        -             return t
        -         elseif (2 * maximum(v̂_cpu)) < d_to_s && force == 1 && dt*step > 1e5
        -             return t
        -         end
        0 
        -     end
        - 
        -     nothing
        - 
        - end
        - 
        - 
        - function timestep!(q, f!, p, dt, (t0, t1), Δq = similar(q), Δq2 = similar(q))
        -     T = eltype(q)
        -     @show Base.summarysize(Δq)/1e9
        -     @show Base.summarysize(Δq)/1e9
        - 
        -     RKA = [
        -         T(0),
        -         T(-567301805773 // 1357537059087),
        -         T(-2404267990393 // 2016746695238),
        -         T(-3550918686646 // 2091501179385),
        -         T(-1275806237668 // 842570457699),
        -     ]
        - 
        -     RKB = [
        -         T(1432997174477 // 9575080441755),
        -         T(5161836677717 // 13612068292357),
        -         T(1720146321549 // 2090206949498),
        -         T(3134564353537 // 4481467310338),
        -         T(2277821191437 // 14882151754819),
        -     ]
        - 
        -     RKC = [
        -         T(0),
        -         T(1432997174477 // 9575080441755),
        -         T(2526269341429 // 6820363962896),
        -         T(2006345519317 // 3224310063776),
        -         T(2802321613138 // 2924317926251),
        -     ]
        -     
        - 
        -     nstep = ceil(Int, (t1 - t0) / dt)
        -     dt = (t1 - t0) / nstep
        - 
        -     fill!(Δq, 0)
        -     fill!(Δq2, 0)
        -     for step in 1:nstep
        -         t = t0 + (step - 1) * dt
        -         for s in 1:length(RKA)
        -             f!(Δq2, q, p, t + RKC[s] * dt)
        -             Δq .+= Δq2
        -             q .+= (RKB[s] * dt) .* Δq
        -             Δq .*= RKA[s % length(RKA) + 1]
        -         end
        -     end
        - 
        -     nothing
        - 
        - end
        - 
        - 
        - function euler!(q, f!, p, dt, t_span, Δq = similar(q))
        -     
        -     nstep = ceil(Int, (t_span[2] - t_span[1]) / dt)
        -     dt = (t_span[2] - t_span[1]) / nstep
        - 
        -     for step in 1:nstep
        -         t = t_span[1] + (step - 1) * dt
        -         fill!(Δq, 0)
        -         f!(Δq, q, p, t)
        -         q .+= dt * Δq
        -     end
        - 
        - end
        - 
        0 
        0 # Quasi-Dynamic rootfinding problem on the fault
        0 function rateandstateQ(V, ψ, σn, τn, ηn, a, V0)
        0     Y = (1 ./ (2 .* V0)) .* exp.(ψ ./ a)
        0     f = a .* asinh.(V .* Y)
        0     dfdV  = a .* (1 ./ sqrt.(1 + (V .* Y).^2)) .* Y
        -     g    = σn .* f + ηn .* V - τn
        -     dgdV = σn .* dfdV + ηn
        -     (g, dgdV)
        - end
        - 
